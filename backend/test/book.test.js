const request = require('supertest');
const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const app = require('../app');
const Book = require('../models/Book');
jest.mock('../__mocks/authMiddleware');


let mongoServer;

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create();
    await mongoose.connect(mongoServer.getUri(), {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    });
});

afterAll(async () => {
    await mongoose.disconnect();
    await mongoServer.stop();
});

afterEach(async () => {
    await Book.deleteMany();
});

describe('üìö –ú–∞—Ä—à—Ä—É—Ç—ã –∫–Ω–∏–≥', () => {
    it('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥', async () => {
        await Book.create({ title: '–ö–Ω–∏–≥–∞ 1', author: '–ê–≤—Ç–æ—Ä', rating: 4 });
        const res = await request(app).get('/api/books');
        expect(res.statusCode).toBe(200);
        expect(res.body.length).toBe(1);
    });

    it('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ ID', async () => {
        const book = await Book.create({ title: 'ID –∫–Ω–∏–≥–∞', author: '–ê–≤—Ç–æ—Ä' });
        const res = await request(app).get(`/api/books/${book._id}`);
        expect(res.statusCode).toBe(200);
        expect(res.body.title).toBe('ID –∫–Ω–∏–≥–∞');
    });

    it('‚ùå –û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', async () => {
        const fakeId = new mongoose.Types.ObjectId();
        const res = await request(app).get(`/api/books/${fakeId}`);
        expect(res.statusCode).toBe(404);
        expect(res.body.message).toBe('–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    });

    it('‚úÖ –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', async () => {
        await Book.create({ title: 'React –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', author: '–ö–∞–Ω–∞—Ç' });
        const res = await request(app).get('/api/books/search?title=react');
        expect(res.statusCode).toBe(200);
        expect(res.body.length).toBe(1);
        expect(res.body[0].title).toMatch(/react/i);
    });

    it('‚úÖ –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É', async () => {
        await Book.create({ title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞', author: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' });
        const res = await request(app).get('/api/books/search?author=–∏–≤–∞–Ω');
        expect(res.statusCode).toBe(200);
        expect(res.body.length).toBe(1);
    });

    it('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (try/catch): –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID', async () => {
        const res = await request(app).get('/api/books/123'); // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
        expect(res.statusCode).toBe(500);
        expect(res.body).toHaveProperty('message', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏');
    });


    it('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏ –ø–æ ID', async () => {
        const book = await Book.create({
            title: '–ö–Ω–∏–≥–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏',
            author: '–ê–≤—Ç–æ—Ä',
            reviews: [{ user: new mongoose.Types.ObjectId(), comment: '–û—Ç–ª–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞', rating: 5 }]
        });
        const res = await request(app).get(`/api/books/${book._id}/reviews`);
        expect(res.statusCode).toBe(200);
        expect(res.body.reviews.length).toBe(1);
        expect(res.body.reviews[0].comment).toBe('–û—Ç–ª–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞');
    });

    it('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –∏—Ö ID', async () => {
        const book1 = await Book.create({ title: '–ö–Ω–∏–≥–∞ 1', author: '–ê–≤—Ç–æ—Ä 1' });
        const book2 = await Book.create({ title: '–ö–Ω–∏–≥–∞ 2', author: '–ê–≤—Ç–æ—Ä 2' });
        const res = await request(app).post('/api/books/specificBooks').send({ bookIds: [book1._id, book2._id] });
        expect(res.statusCode).toBe(200);
        expect(res.body.length).toBe(2);
    });

    it('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–Ω–∏–≥ (–ø–æ –¥–∞—Ç–µ)', async () => {
        await Book.create({
            title: '–°—Ç–∞—Ä–∞—è –∫–Ω–∏–≥–∞',
            author: '–ê–≤—Ç–æ—Ä 1',
            createdAt: new Date('2023-01-01')
        });
        await Book.create({
            title: '–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞',
            author: '–ê–≤—Ç–æ—Ä 2',
            createdAt: new Date('2025-01-01')
        });

        const res = await request(app).get('/api/books/latest');
        expect(res.statusCode).toBe(200);
        expect(res.body[0].title).toBe('–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞');
    });

    it('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–Ω–∏–≥ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É', async () => {
        await Book.create({
            title: '–ö–Ω–∏–≥–∞ A',
            author: '–ê–≤—Ç–æ—Ä 1',
            rating: 4
        });
        await Book.create({
            title: '–ö–Ω–∏–≥–∞ B',
            author: '–ê–≤—Ç–æ—Ä 2',
            rating: 5
        });

        const res = await request(app).get('/api/books/top-rated');
        expect(res.statusCode).toBe(200);
        expect(res.body[0].rating).toBe(5);
    });

});

it('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏', async () => {
    const res = await request(app)
        .post('/api/books/add')
        .send({
            title: '–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞',
            author: '–ê–≤—Ç–æ—Ä',
            genre: '–ü—Ä–æ–∑–∞',
            description: '–û–ø–∏—Å–∞–Ω–∏–µ',
            publishedYear: 2024,
            rating: 5,
            coverUrl: 'http://example.com/image.jpg'
        });

    expect(res.statusCode).toBe(201);
    expect(res.body.message).toBe('–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏!!');

    const books = await Book.find();
    expect(books.length).toBe(1);
    expect(books[0].title).toBe('–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞');

    expect(res.body.book.title).toBe('–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞');
    expect(res.body.book.author).toBe('–ê–≤—Ç–æ—Ä');
    expect(res.body.book.genre).toBe('–ü—Ä–æ–∑–∞');
    expect(res.body.book.publishedYear).toBe(2024);
    expect(res.body.book.rating).toBe(5);
    expect(res.body.book.coverUrl).toBe('http://example.com/image.jpg');
});


